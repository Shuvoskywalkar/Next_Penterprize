{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useResolvedFontFamily = useResolvedFontFamily;\n\nvar _useTheme = require(\"./useTheme\");\n\nfunction useResolvedFontFamily(props) {\n  var fontFamily = props.fontFamily,\n      fontStyle = props.fontStyle,\n      fontWeight = props.fontWeight;\n  var newFontFamily = fontFamily;\n  var newFontStyle = fontStyle;\n  var newFontWeight = fontWeight;\n\n  var _ref = (0, _useTheme.useTheme)(),\n      fontConfig = _ref.fontConfig,\n      fontWeights = _ref.fontWeights,\n      fonts = _ref.fonts;\n\n  if (fontWeight && fontStyle && fontFamily && fontFamily in fonts) {\n    var fontToken = fonts[fontFamily];\n\n    if (fontConfig && fontConfig[fontToken]) {\n      newFontWeight = undefined;\n      newFontStyle = undefined;\n      var fontWeightNumber = fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      var fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === \"object\") {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle\n  };\n}","map":{"version":3,"sources":["C:\\Users\\88017\\directory2\\my-app\\node_modules\\native-base\\lib\\commonjs\\hooks\\useResolvedFontFamily.js"],"names":["Object","defineProperty","exports","value","useResolvedFontFamily","_useTheme","require","props","fontFamily","fontStyle","fontWeight","newFontFamily","newFontStyle","newFontWeight","fontConfig","fontWeights","fonts","useTheme","fontToken","undefined","fontWeightNumber","fontVariant"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAPD,CAAsBE,OAAtBF,EAA+B,YAA/BA,EAA6C;AAC3CG,EAAAA,KAAK,EAAE;AADoC,CAA7CH;AAGAE,OAAO,CAACE,qBAARF,GAAgCE,qBAAhCF;;AAEA,IAAIG,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAvB;;AAWA,SAASF,qBAAT,CAA+BG,KAA/B,EAAsC;AACpC,MACEC,UADF,GAIID,KAJJ,CACEC,UADF;AAAA,MAEEC,SAFF,GAIIF,KAJJ,CAEEE,SAFF;AAAA,MAGEC,UAHF,GAIIH,KAJJ,CAGEG,UAHF;AAKA,MAAIC,aAAa,GAAGH,UAApB;AACA,MAAII,YAAY,GAAGH,SAAnB;AACA,MAAII,aAAa,GAAGH,UAApB;;AACA,aAIK,CAAA,GAAGL,SAAS,CAACY,QAAb,GAJL;AAAA,MACEH,UADF,QACEA,UADF;AAAA,MAEEC,WAFF,QAEEA,WAFF;AAAA,MAGEC,KAHF,QAGEA,KAHF;;AAMA,MAAIN,UAAU,IAAID,SAAdC,IAA2BF,UAA3BE,IAAyCF,UAAU,IAAIQ,KAA3D,EAAkE;AAEhE,QAAME,SAAS,GAAGF,KAAK,CAACR,UAAD,CAAvB;;AAEA,QAAIM,UAAU,IAAIA,UAAU,CAACI,SAAD,CAA5B,EAAyC;AAKvCL,MAAAA,aAAa,GAAGM,SAAhBN;AAEAD,MAAAA,YAAY,GAAGO,SAAfP;AACA,UAAIQ,gBAAgB,GAAGV,UAAU,IAAIK,WAAdL,GAA4BK,WAAW,CAACL,UAAD,CAAvCA,GAAsDA,UAA7E;AACA,UAAIW,WAAW,GAAGP,UAAU,CAACI,SAAD,CAAVJ,CAAsBM,gBAAtBN,CAAlB;;AAEA,UAAI,OAAOO,WAAP,KAAuB,QAA3B,EAAqC;AACnC,YAAIA,WAAW,CAACZ,SAAD,CAAf,EAA4BE,aAAa,GAAGU,WAAW,CAACZ,SAAD,CAA3BE;AAC7B,OAFD,MAEO;AACLA,QAAAA,aAAa,GAAGU,WAAhBV;AACD;AACF,KAhBD,MAgBO;AACLA,MAAAA,aAAa,GAAGK,KAAK,CAACR,UAAD,CAArBG;AACD;AACF;;AAED,SAAO;AACLH,IAAAA,UAAU,EAAEG,aADP;AAELD,IAAAA,UAAU,EAAEG,aAFP;AAGLJ,IAAAA,SAAS,EAAEG;AAHN,GAAP;AAKD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useResolvedFontFamily = useResolvedFontFamily;\n\nvar _useTheme = require(\"./useTheme\");\n\n/**\n *\n * @param props\n * @returns resolved fontFamily\n * @description Combination of fontWeight, fontStyle and font family is fully supported on web but on Android we need to pass the exact font family.\n * for e.g. If we load Roboto-Light-Italic.ttf using css, we can use fontFamily: Roboto, fontWeight: 300, fontStyle: italic on web, but same may not work on all the platforms. Other platform needs to set fontFamily: Roboto-Light-Italic in order to work.\n * So this function's purpose is to intake styles like fontFamily: Roboto, fontWeight: 300, fontStyle: Italic and return fontFamily: Roboto-Light-Italic depending upon the fontConfig token in typography theme.\n * This function depends upon fontConfig token in typography for mapping.\n */\nfunction useResolvedFontFamily(props) {\n  const {\n    fontFamily,\n    fontStyle,\n    fontWeight\n  } = props;\n  let newFontFamily = fontFamily;\n  let newFontStyle = fontStyle;\n  let newFontWeight = fontWeight;\n  const {\n    fontConfig,\n    fontWeights,\n    fonts\n  } = (0, _useTheme.useTheme)();\n\n  if (fontWeight && fontStyle && fontFamily && fontFamily in fonts) {\n    // TODO: Fix typing remove any.\n    const fontToken = fonts[fontFamily];\n\n    if (fontConfig && fontConfig[fontToken]) {\n      // If a custom font family is resolved, set fontWeight and fontStyle to undefined.\n      // https://github.com/GeekyAnts/NativeBase/issues/3811\n      // On Android, If a fontFamily and fontWeight both are passed, it behaves in a weird way and applies system fonts with passed fontWeight. This happens only for some fontWeights e.g. '700' or 'bold'. So, if we find a custom fontFamily, we remove fontWeight and fontStyle\n      //@ts-ignore\n      newFontWeight = undefined; //@ts-ignore\n\n      newFontStyle = undefined;\n      let fontWeightNumber = fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      let fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle\n  };\n}\n//# sourceMappingURL=useResolvedFontFamily.js.map"]},"metadata":{},"sourceType":"script"}