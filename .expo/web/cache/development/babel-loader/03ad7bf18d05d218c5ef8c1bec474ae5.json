{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useColorModeValue = useColorModeValue;\nexports.useModeManager = useModeManager;\nexports.useAccessibleColors = useAccessibleColors;\nexports.useColorMode = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _Context = require(\"./../hybrid-overlay/Context\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar useColorMode = function useColorMode() {\n  var _react$default$useCon = _react.default.useContext(_Context.HybridContext),\n      colorModeContext = _react$default$useCon.colorMode;\n\n  if (colorModeContext === undefined) {\n    throw new Error(\"useColorMode must be used within a NativeBaseProvider\");\n  }\n\n  return colorModeContext;\n};\n\nexports.useColorMode = useColorMode;\n\nfunction useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return colorMode === \"dark\" ? dark : light;\n}\n\nfunction useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  var systemColorMode = (0, _reactNative.useColorScheme)();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  var _ref = (0, _react.useState)(initialColorMode),\n      _ref2 = _slicedToArray(_ref, 2),\n      colorMode = _ref2[0],\n      setRawMode = _ref2[1];\n\n  var setColorMode = _react.default.useCallback(function _callee(val) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!colorModeManager) {\n              _context.next = 3;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(colorModeManager.set(val));\n\n          case 3:\n            setRawMode(val);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [colorModeManager]);\n\n  (0, _react.useEffect)(function () {\n    if (colorModeManager) {\n      (function getMode() {\n        var value;\n        return _regeneratorRuntime.async(function getMode$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _regeneratorRuntime.awrap(colorModeManager.get(initialColorMode));\n\n              case 2:\n                value = _context2.sent;\n\n                if (value && value !== colorMode) {\n                  setRawMode(value);\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n  (0, _react.useEffect)(function () {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  };\n}\n\nfunction useAccessibleColors() {\n  var _react$default$useCon2 = _react.default.useContext(_Context.HybridContext),\n      colorModeContext = _react$default$useCon2.colorMode;\n\n  var toggleAccessibleColors = function toggleAccessibleColors() {\n    return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  };\n\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}","map":{"version":3,"sources":["C:\\Users\\88017\\directory2\\my-app\\node_modules\\native-base\\lib\\commonjs\\core\\color-mode\\hooks.js"],"names":["Object","defineProperty","exports","value","useColorModeValue","useModeManager","useAccessibleColors","useColorMode","_react","_interopRequireWildcard","require","_Context","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","default","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","colorMode","colorModeContext","useContext","HybridContext","undefined","Error","light","dark","initialColorMode","useSystemColorMode","colorModeManager","systemColorMode","_reactNative","useColorScheme","setRawMode","useState","setColorMode","useCallback","val","useEffect","getMode","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"mappings":"AAAA;;;;;;AAEAA,MAAM,CAACC,cAAPD,CAAsBE,OAAtBF,EAA+B,YAA/BA,EAA6C;AAC3CG,EAAAA,KAAK,EAAE;AADoC,CAA7CH;AAGAE,OAAO,CAACE,iBAARF,GAA4BE,iBAA5BF;AACAA,OAAO,CAACG,cAARH,GAAyBG,cAAzBH;AACAA,OAAO,CAACI,mBAARJ,GAA8BI,mBAA9BJ;AACAA,OAAO,CAACK,YAARL,GAAuB,KAAK,CAA5BA;;AAEA,IAAIM,MAAM,GAAGC,uBAAuB,CAACC,OAAO,CAAC,OAAD,CAAR,CAApC;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,6BAAD,CAAtB;;;;AAIA,SAASE,wBAAT,GAAoC;AAAE,MAAI,OAAOC,OAAP,KAAmB,UAAvB,EAAmC,OAAO,IAAP;AAAa,MAAIC,KAAK,GAAG,IAAID,OAAJ,EAAZ;;AAA2BD,EAAAA,wBAAwB,GAAG,oCAAY;AAAE,WAAOE,KAAP;AAAe,GAAxDF;;AAA0D,SAAOE,KAAP;AAAe;;AAE1L,SAASL,uBAAT,CAAiCM,GAAjC,EAAsC;AAAE,MAAIA,GAAG,IAAIA,GAAG,CAACC,UAAf,EAA2B;AAAE,WAAOD,GAAP;AAAa;;AAAC,MAAIA,GAAG,KAAK,IAARA,IAAgB,OAAOA,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,UAA9D,EAA0E;AAAE,WAAO;AAAEE,MAAAA,OAAO,EAAEF;AAAX,KAAP;AAA0B;;AAAC,MAAID,KAAK,GAAGF,wBAAwB,EAApC;;AAAwC,MAAIE,KAAK,IAAIA,KAAK,CAACI,GAANJ,CAAUC,GAAVD,CAAb,EAA6B;AAAE,WAAOA,KAAK,CAACK,GAANL,CAAUC,GAAVD,CAAP;AAAwB;;AAAC,MAAIM,MAAM,GAAG,EAAb;AAAiB,MAAIC,qBAAqB,GAAGrB,MAAM,CAACC,cAAPD,IAAyBA,MAAM,CAACsB,wBAA5D;;AAAsF,OAAK,IAAIC,GAAT,IAAgBR,GAAhB,EAAqB;AAAE,QAAIf,MAAM,CAACwB,SAAPxB,CAAiByB,cAAjBzB,CAAgC0B,IAAhC1B,CAAqCe,GAArCf,EAA0CuB,GAA1CvB,CAAJ,EAAoD;AAAE,UAAI2B,IAAI,GAAGN,qBAAqB,GAAGrB,MAAM,CAACsB,wBAAPtB,CAAgCe,GAAhCf,EAAqCuB,GAArCvB,CAAH,GAA+C,IAA/E;;AAAqF,UAAI2B,IAAI,KAAKA,IAAI,CAACR,GAALQ,IAAYA,IAAI,CAACC,GAAtB,CAAR,EAAoC;AAAE5B,QAAAA,MAAM,CAACC,cAAPD,CAAsBoB,MAAtBpB,EAA8BuB,GAA9BvB,EAAmC2B,IAAnC3B;AAA2C,OAAjF,MAAuF;AAAEoB,QAAAA,MAAM,CAACG,GAAD,CAANH,GAAcL,GAAG,CAACQ,GAAD,CAAjBH;AAAyB;AAAE;AAAE;;AAACA,EAAAA,MAAM,CAACH,OAAPG,GAAiBL,GAAjBK;;AAAsB,MAAIN,KAAJ,EAAW;AAAEA,IAAAA,KAAK,CAACc,GAANd,CAAUC,GAAVD,EAAeM,MAAfN;AAAyB;;AAAC,SAAOM,MAAP;AAAgB;;AAEvuB,IAAMb,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,8BAEIC,MAAM,CAACS,OAAPT,CAAeuB,UAAfvB,CAA0BG,QAAQ,CAACqB,aAAnCxB,CAFJ;AAAA,MACasB,gBADb,yBACED,SADF;;AAIA,MAAIC,gBAAgB,KAAKG,SAAzB,EAAoC;AAClC,UAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACD;;AAED,SAAOJ,gBAAP;AACA,CAVF;;AAYA5B,OAAO,CAACK,YAARL,GAAuBK,YAAvBL;;AAEA,SAASE,iBAAT,CAA2B+B,KAA3B,EAAkCC,IAAlC,EAAwC;AACtC,sBAEI7B,YAAY,EAFhB;AAAA,MACEsB,SADF,iBACEA,SADF;;AAGA,SAAOA,SAAS,KAAK,MAAdA,GAAuBO,IAAvBP,GAA8BM,KAArC;AACD;;AAED,SAAS9B,cAAT,CAAwBgC,gBAAxB,EAA0CC,kBAA1C,EAA8DC,gBAA9D,EAAgF;AAC9E,MAAMC,eAAe,GAAI,CAAA,GAAGC,YAAY,CAACC,cAAhB,GAAzB;;AAEA,MAAIJ,kBAAJ,EAAwB;AACtBD,IAAAA,gBAAgB,GAAGG,eAAnBH;AACD;;AAED,aAAiC,CAAA,GAAG7B,MAAM,CAACoC,QAAV,EAAoBP,gBAApB,CAAjC;AAAA;AAAA,MAAOR,SAAP;AAAA,MAAkBc,UAAlB;;AAEA,MAAME,YAAY,GAAGrC,MAAM,CAACS,OAAPT,CAAesC,WAAftC,CAA2B,iBAAMuC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA,iBAC1CR,gBAD0C;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAEtCA,gBAAgB,CAACX,GAAjBW,CAAqBQ,GAArBR,CAFsC;;AAAA;AAK9CI,YAAAA,UAAU,CAACI,GAAD,CAAVJ;;AAL8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3BnC,EAMlB,CAAC+B,gBAAD,CANkB/B,CAArB;;AASC,GAAA,GAAGA,MAAM,CAACwC,SAAV,EAAqB,YAAM;AAC1B,QAAIT,gBAAJ,EAAsB;AACpB,OAAC,SAAeU,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDACmBV,gBAAgB,CAACpB,GAAjBoB,CAAqBF,gBAArBE,CADnB;;AAAA;AACKpC,gBAAAA,KADL;;AAGC,oBAAIA,KAAK,IAAIA,KAAK,KAAK0B,SAAvB,EAAkC;AAChCc,kBAAAA,UAAU,CAACxC,KAAD,CAAVwC;AACD;;AALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;AAOD;AACF,GAVA,EAUE,CAACd,SAAD,EAAYQ,gBAAZ,EAA8BE,gBAA9B,CAVF;AAYA,GAAA,GAAG/B,MAAM,CAACwC,SAAV,EAAqB,YAAM;AAC1B,QAAI,CAACT,gBAAD,IAAqBD,kBAAzB,EAA6C;AAC3CK,MAAAA,UAAU,CAACH,eAAD,CAAVG;AACD;AACF,GAJA,EAIE,CAACH,eAAD,EAAkBD,gBAAlB,EAAoCD,kBAApC,EAAwDK,UAAxD,CAJF;AAKD,SAAO;AACLd,IAAAA,SAAS,EAATA,SADK;AAELgB,IAAAA,YAAY,EAAZA;AAFK,GAAP;AAID;;AAED,SAASvC,mBAAT,GAA+B;AAC7B,+BAEIE,MAAM,CAACS,OAAPT,CAAeuB,UAAfvB,CAA0BG,QAAQ,CAACqB,aAAnCxB,CAFJ;AAAA,MACasB,gBADb,0BACED,SADF;;AAIA,MAAMqB,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA,WAAMpB,gBAAgB,CAACqB,mBAAjBrB,CAAqC,CAACA,gBAAgB,CAACsB,gBAAvDtB,CAAN;AAAA,GAA/B;;AAEA,SAAO,CAACA,gBAAgB,CAACsB,gBAAlB,EAAoCtB,gBAAgB,CAACqB,mBAArD,EAA0ED,sBAA1E,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useColorModeValue = useColorModeValue;\nexports.useModeManager = useModeManager;\nexports.useAccessibleColors = useAccessibleColors;\nexports.useColorMode = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _Context = require(\"./../hybrid-overlay/Context\");\n\nvar _reactNative = require(\"react-native\");\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nconst useColorMode = () => {\n  const {\n    colorMode: colorModeContext\n  } = _react.default.useContext(_Context.HybridContext);\n\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n\n  return colorModeContext;\n};\n\nexports.useColorMode = useColorMode;\n\nfunction useColorModeValue(light, dark) {\n  const {\n    colorMode\n  } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nfunction useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  const systemColorMode = (0, _reactNative.useColorScheme)();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = (0, _react.useState)(initialColorMode);\n\n  const setColorMode = _react.default.useCallback(async val => {\n    if (colorModeManager) {\n      await colorModeManager.set(val);\n    }\n\n    setRawMode(val);\n  }, [colorModeManager]); // For initial setting initial color mode from storage\n\n\n  (0, _react.useEffect)(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]); // Set system color mode only when user has not passed a colorModeManager\n\n  (0, _react.useEffect)(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode,\n    setColorMode\n  };\n}\n\nfunction useAccessibleColors() {\n  const {\n    colorMode: colorModeContext\n  } = _react.default.useContext(_Context.HybridContext);\n\n  const toggleAccessibleColors = () => colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}\n//# sourceMappingURL=hooks.js.map"]},"metadata":{},"sourceType":"script"}