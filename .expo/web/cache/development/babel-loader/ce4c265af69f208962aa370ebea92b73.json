{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === \"function\") {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nimport { useColorMode } from \"./../core/color-mode\";\nimport { useTheme } from \"./useTheme\";\n\nvar _s = $RefreshSig$();\n\nexport function useNativeBase() {\n  _s();\n\n  var colorModeResult = useColorMode();\n  var theme = useTheme();\n  return _objectSpread({}, colorModeResult, {\n    theme: theme\n  });\n}\n\n_s(useNativeBase, \"VKrfNSGxYmyoX8xng8En/KLr9Vs=\", false, function () {\n  return [useColorMode, useTheme];\n});\n\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["C:\\Users\\88017\\directory2\\my-app\\node_modules\\native-base\\lib\\module\\hooks\\useNativeBase.js"],"names":["useColorMode","useTheme","useNativeBase","colorModeResult","theme"],"mappings":"AAAA,SAAA,eAAA,CAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,YAAT,QAA6B,sBAA7B;AACA,SAASC,QAAT,QAAyB,YAAzB;;;;AAMA,OAAO,SAASC,aAAT,GAAyB;;;AAC9B,MAAMC,eAAe,GAAGH,YAAY,EAApC;AACA,MAAMI,KAAK,GAAGH,QAAQ,EAAtB;AACA,SAAO,aAAA,CAAA,EAAA,EAAKE,eAAL,EAAoB;AACzBC,IAAAA,KAAK,EAALA;AADyB,GAApB,CAAP;AAGD;;GANeF,a,EAAa,8B,EAAA,K,EAAA,YAAA;UACHF,Y,EACVC,Q","sourcesContent":["import { useColorMode } from './../core/color-mode';\nimport { useTheme } from './useTheme';\n/**\n *\n * @returns object containing `colorMode` information and `theme` object\n */\n\nexport function useNativeBase() {\n  const colorModeResult = useColorMode();\n  const theme = useTheme();\n  return { ...colorModeResult,\n    theme\n  };\n}\n//# sourceMappingURL=useNativeBase.js.map"]},"metadata":{},"sourceType":"module"}