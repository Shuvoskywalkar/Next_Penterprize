{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useScreenReaderEnabled = useScreenReaderEnabled;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction useScreenReaderEnabled() {\n  var _react$default$useSta = _react.default.useState(false),\n      _react$default$useSta2 = _slicedToArray(_react$default$useSta, 2),\n      enabled = _react$default$useSta2[0],\n      setEnabled = _react$default$useSta2[1];\n\n  var mountedRef = _react.default.useRef(false);\n\n  var handleSetEnabled = function handleSetEnabled(value) {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  _react.default.useEffect(function () {\n    mountedRef.current = true;\n\n    function setInitialValue() {\n      var res;\n      return _regeneratorRuntime.async(function setInitialValue$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(_reactNative.AccessibilityInfo.isScreenReaderEnabled());\n\n            case 2:\n              res = _context.sent;\n              handleSetEnabled(res);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    var handler = _reactNative.AccessibilityInfo.addEventListener(\"screenReaderChanged\", function (event) {\n      handleSetEnabled(event);\n    });\n\n    setInitialValue();\n    return function () {\n      mountedRef.current = false;\n\n      _reactNative.AccessibilityInfo.removeEventListener(\"screenReaderChanged\", handler);\n    };\n  });\n\n  return enabled;\n}","map":{"version":3,"sources":["C:\\Users\\88017\\directory2\\my-app\\node_modules\\native-base\\lib\\commonjs\\hooks\\useScreenReaderEnabled.js"],"names":["Object","defineProperty","exports","value","useScreenReaderEnabled","_react","_interopRequireDefault","require","obj","__esModule","default","enabled","setEnabled","useState","mountedRef","useRef","handleSetEnabled","current","useEffect","setInitialValue","res","_reactNative","AccessibilityInfo","isScreenReaderEnabled","handler","addEventListener","event","removeEventListener"],"mappings":"AAAA;;;;;;AAEAA,MAAM,CAACC,cAAPD,CAAsBE,OAAtBF,EAA+B,YAA/BA,EAA6C;AAC3CG,EAAAA,KAAK,EAAE;AADoC,CAA7CH;AAGAE,OAAO,CAACE,sBAARF,GAAiCE,sBAAjCF;;AAEA,IAAIG,MAAM,GAAGC,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAnC;;;;AAIA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAXD,GAAwBA,GAAxBA,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/F,SAASJ,sBAAT,GAAkC;AAChC,8BAA8BC,MAAM,CAACK,OAAPL,CAAeQ,QAAfR,CAAwB,KAAxBA,CAA9B;AAAA;AAAA,MAAOM,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAME,UAAU,GAAGT,MAAM,CAACK,OAAPL,CAAeU,MAAfV,CAAsB,KAAtBA,CAAnB;;AAEA,MAAMW,gBAAgB,GAAGb,SAAnBa,gBAAmBb,CAAAA,KAAAA,EAAS;AAChC,QAAIW,UAAU,CAACG,OAAf,EAAwB;AACtBL,MAAAA,UAAU,CAACT,KAAD,CAAVS;AACD;AACD,GAJF;;AAMAP,EAAAA,MAAM,CAACK,OAAPL,CAAea,SAAfb,CAAyB,YAAM;AAC7BS,IAAAA,UAAU,CAACG,OAAXH,GAAqB,IAArBA;;AAEA,aAAeK,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACoBE,YAAY,CAACC,iBAAbD,CAA+BE,qBAA/BF,EADpB;;AAAA;AACQD,cAAAA,GADR;AAEEJ,cAAAA,gBAAgB,CAACI,GAAD,CAAhBJ;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,QAAIQ,OAAO,GAAGH,YAAY,CAACC,iBAAbD,CAA+BI,gBAA/BJ,CAAgD,qBAAhDA,EAAuEK,UAAAA,KAAAA,EAAS;AAC5FV,MAAAA,gBAAgB,CAACU,KAAD,CAAhBV;AACD,KAFaK,CAAd;;AAIAF,IAAAA,eAAe;AACf,WAAO,YAAM;AACXL,MAAAA,UAAU,CAACG,OAAXH,GAAqB,KAArBA;;AAEAO,MAAAA,YAAY,CAACC,iBAAbD,CAA+BM,mBAA/BN,CAAmD,qBAAnDA,EAA0EG,OAA1EH;AACD,KAJD;AAKD,GAlBDhB;;AAoBA,SAAOM,OAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useScreenReaderEnabled = useScreenReaderEnabled;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction useScreenReaderEnabled() {\n  const [enabled, setEnabled] = _react.default.useState(false);\n\n  const mountedRef = _react.default.useRef(false);\n\n  const handleSetEnabled = value => {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  _react.default.useEffect(() => {\n    mountedRef.current = true;\n\n    async function setInitialValue() {\n      const res = await _reactNative.AccessibilityInfo.isScreenReaderEnabled();\n      handleSetEnabled(res);\n    }\n\n    let handler = _reactNative.AccessibilityInfo.addEventListener('screenReaderChanged', event => {\n      handleSetEnabled(event);\n    });\n\n    setInitialValue();\n    return () => {\n      mountedRef.current = false;\n\n      _reactNative.AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n\n  return enabled;\n}\n//# sourceMappingURL=useScreenReaderEnabled.js.map"]},"metadata":{},"sourceType":"script"}