{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction murmurhash2_32_gc(str, seed) {\n  var l = str.length,\n      h = seed ^ l,\n      i = 0,\n      k;\n\n  while (l >= 4) {\n    k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;\n    k = (k & 65535) * 1540483477 + (((k >>> 16) * 1540483477 & 65535) << 16);\n    k ^= k >>> 24;\n    k = (k & 65535) * 1540483477 + (((k >>> 16) * 1540483477 & 65535) << 16);\n    h = (h & 65535) * 1540483477 + (((h >>> 16) * 1540483477 & 65535) << 16) ^ k;\n    l -= 4;\n    ++i;\n  }\n\n  switch (l) {\n    case 3:\n      h ^= (str.charCodeAt(i + 2) & 255) << 16;\n\n    case 2:\n      h ^= (str.charCodeAt(i + 1) & 255) << 8;\n\n    case 1:\n      h ^= str.charCodeAt(i) & 255;\n      h = (h & 65535) * 1540483477 + (((h >>> 16) * 1540483477 & 65535) << 16);\n  }\n\n  h ^= h >>> 13;\n  h = (h & 65535) * 1540483477 + (((h >>> 16) * 1540483477 & 65535) << 16);\n  h ^= h >>> 15;\n  return h >>> 0;\n}\n\nvar hash = function hash(str) {\n  return murmurhash2_32_gc(str, 1).toString(36);\n};\n\nvar _default = hash;\nexports.default = _default;","map":{"version":3,"sources":["C:\\Users\\88017\\directory2\\my-app\\node_modules\\native-base\\lib\\commonjs\\utils\\useResponsiveQuery\\hash.js"],"names":["Object","defineProperty","exports","value","default","murmurhash2_32_gc","str","seed","l","length","h","i","k","charCodeAt","hash","toString","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAPD,CAAsBE,OAAtBF,EAA+B,YAA/BA,EAA6C;AAC3CG,EAAAA,KAAK,EAAE;AADoC,CAA7CH;AAGAE,OAAO,CAACE,OAARF,GAAkB,KAAK,CAAvBA;;AAkBA,SAASG,iBAAT,CAA2BC,GAA3B,EAAgCC,IAAhC,EAAsC;AACpC,MAAIC,CAAC,GAAGF,GAAG,CAACG,MAAZ;AAAA,MACIC,CAAC,GAAGH,IAAI,GAAGC,CADf;AAAA,MAEIG,CAAC,GAAG,CAFR;AAAA,MAGIC,CAHJ;;AAKA,SAAOJ,CAAC,IAAI,CAAZ,EAAe;AACbI,IAAAA,CAAC,GAAGN,GAAG,CAACO,UAAJP,CAAeK,CAAfL,IAAoB,GAApBA,GAA2B,CAACA,GAAG,CAACO,UAAJP,CAAe,EAAEK,CAAjBL,IAAsB,GAAvB,KAAgC,CAA3DA,GAA+D,CAACA,GAAG,CAACO,UAAJP,CAAe,EAAEK,CAAjBL,IAAsB,GAAvB,KAAgC,EAA/FA,GAAoG,CAACA,GAAG,CAACO,UAAJP,CAAe,EAAEK,CAAjBL,IAAsB,GAAvB,KAAgC,EAAxIM;AACAA,IAAAA,CAAC,GAAG,CAACA,CAAC,GAAG,KAAL,IAAe,UAAf,IAA6B,CAAC,CAACA,CAAC,KAAK,EAAP,IAAa,UAAb,GAA0B,KAA3B,KAAsC,EAAnE,CAAJA;AACAA,IAAAA,CAAC,IAAIA,CAAC,KAAK,EAAXA;AACAA,IAAAA,CAAC,GAAG,CAACA,CAAC,GAAG,KAAL,IAAe,UAAf,IAA6B,CAAC,CAACA,CAAC,KAAK,EAAP,IAAa,UAAb,GAA0B,KAA3B,KAAsC,EAAnE,CAAJA;AACAF,IAAAA,CAAC,GAAG,CAACA,CAAC,GAAG,KAAL,IAAe,UAAf,IAA6B,CAAC,CAACA,CAAC,KAAK,EAAP,IAAa,UAAb,GAA0B,KAA3B,KAAsC,EAAnE,IAAyEE,CAA7EF;AACAF,IAAAA,CAAC,IAAI,CAALA;AACA,MAAEG,CAAF;AACD;;AAED,UAAQH,CAAR;AACE,SAAK,CAAL;AACEE,MAAAA,CAAC,IAAI,CAACJ,GAAG,CAACO,UAAJP,CAAeK,CAAC,GAAG,CAAnBL,IAAwB,GAAzB,KAAkC,EAAvCI;;AAEF,SAAK,CAAL;AACEA,MAAAA,CAAC,IAAI,CAACJ,GAAG,CAACO,UAAJP,CAAeK,CAAC,GAAG,CAAnBL,IAAwB,GAAzB,KAAkC,CAAvCI;;AAEF,SAAK,CAAL;AACEA,MAAAA,CAAC,IAAIJ,GAAG,CAACO,UAAJP,CAAeK,CAAfL,IAAoB,GAAzBI;AACAA,MAAAA,CAAC,GAAG,CAACA,CAAC,GAAG,KAAL,IAAe,UAAf,IAA6B,CAAC,CAACA,CAAC,KAAK,EAAP,IAAa,UAAb,GAA0B,KAA3B,KAAsC,EAAnE,CAAJA;AATJ;;AAYAA,EAAAA,CAAC,IAAIA,CAAC,KAAK,EAAXA;AACAA,EAAAA,CAAC,GAAG,CAACA,CAAC,GAAG,KAAL,IAAe,UAAf,IAA6B,CAAC,CAACA,CAAC,KAAK,EAAP,IAAa,UAAb,GAA0B,KAA3B,KAAsC,EAAnE,CAAJA;AACAA,EAAAA,CAAC,IAAIA,CAAC,KAAK,EAAXA;AACA,SAAOA,CAAC,KAAK,CAAb;AACD;;AAED,IAAMI,IAAI,GAAG,SAASA,IAAT,CAAcR,GAAd,EAAmB;AAC9B,SAAOD,iBAAiB,CAACC,GAAD,EAAM,CAAN,CAAjBD,CAA0BU,QAA1BV,CAAmC,EAAnCA,CAAP;AACA,CAFF;;AAIA,IAAIW,QAAQ,GAAGF,IAAf;AACAZ,OAAO,CAACE,OAARF,GAAkBc,QAAlBd","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/* eslint-disable */\n//@ts-nocheck\n// This hash function is taken from react native web\n\n/**\n * JS Implementation of MurmurHash2\n *\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n *\n * @param {string} str ASCII only\n * @param {number} seed Positive integer only\n * @return {number} 32-bit positive integer hash\n */\nfunction murmurhash2_32_gc(str, seed) {\n  var l = str.length,\n      h = seed ^ l,\n      i = 0,\n      k;\n\n  while (l >= 4) {\n    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    k ^= k >>> 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;\n    l -= 4;\n    ++i;\n  }\n\n  switch (l) {\n    case 3:\n      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      h ^= str.charCodeAt(i) & 0xff;\n      h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  }\n\n  h ^= h >>> 13;\n  h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  h ^= h >>> 15;\n  return h >>> 0;\n}\n\nconst hash = function hash(str) {\n  return murmurhash2_32_gc(str, 1).toString(36);\n};\n\nvar _default = hash;\nexports.default = _default;\n//# sourceMappingURL=hash.js.map"]},"metadata":{},"sourceType":"script"}